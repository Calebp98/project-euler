'''Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

(3n^2 -n -2Pn = 0)

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?'''

from math import sqrt
from functools import reduce

from itertools import combinations
from math import sqrt


def factors(n):
    step = 2 if n % 2 else 1
    return set(reduce(list.__add__,
                      ([i, n // i] for i in range(1, int(sqrt(n)) + 1, step) if n % i == 0)))


def generate_pentagonals(n):
    p = []
    for i in range(1, n + 1):
        p.append(i * (3 * i - 1) / 2)
    return p

def check_pentagonal(p_n):
    n = (sqrt(24*p_n+1)+1)/6
    return n == int(n)

assert(check_pentagonal(1)==True)
assert(check_pentagonal(22)==True)
assert(check_pentagonal(51)==True)
assert(check_pentagonal(3)==False)
assert(check_pentagonal(0)==False)


n = 1000
pentagonals = generate_pentagonals(n)
pentagonal_pairs = combinations(pentagonals,2)
# print(list(pentagonal_pairs))
n = 0
p = []
cond = False
while cond == False:
    n +=1
    p_n = n*(3*n-1)/2
    p.append(p_n)
    for num in p:
        pair = [num, p_n]
        if check_pentagonal(pair[1]-pair[0]):
            if check_pentagonal(pair[0]+pair[1]):
                print(pair[1]-pair[0])
                cond = True
    p.append(p_n)
